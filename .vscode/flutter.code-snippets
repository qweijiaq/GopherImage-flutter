{
  "StatelessWidget": {
    "prefix": "slw",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container}(",
      "      child: Text('${1:WidgetName}'),",
      "    );",
      "  }",
      "}"
    ],
    "description": "StatelessWidget"
  },
  "StatelessWidget with Constructor": {
    "prefix": "slwc",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatelessWidget {",
      "",
      "  ${1:WidgetName}();",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container}(",
      "      child: Text('${1:WidgetName}'),",
      "    );",
      "  }",
      "}"
    ],
    "description": "StatelessWidget"
  },
  "StatefulWidget with Constructor": {
    "prefix": "sfwc",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatefulWidget {",
      "",
      "  ${1:WidgetName}();",
      "",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:WidgetName}State extends State<${1:WidgetName}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container}(",
      "      child: Text('${1:WidgetName}'),",
      "    );",
      "  }",
      "}"
    ],
    "description": "StatefulWidget"
  },
  "StatefulWidget": {
    "prefix": "sfw",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatefulWidget {",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:WidgetName}State extends State<${1:WidgetName}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:Container}(",
      "      child: Text('${1:WidgetName}'),",
      "    );",
      "  }",
      "}"
    ],
    "description": "StatefulWidget"
  },
  "StatelessWidget with Scaffold": {
    "prefix": "slws",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatelessWidget {",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn ${Scaffold}(",
      "\t\t\tappBar: AppBar(",
      "\t\t\t\ttitle: Text('${1:WidgetName}'),",
      "\t\t\t),${2}",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "StatelessWidget with Scaffold"
  },
  "StatefulWidget with Scaffold": {
    "prefix": "sfws",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:WidgetName} extends StatefulWidget {",
      "\t@override",
      "\t_${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:WidgetName}State extends State<${1:WidgetName}> {",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn ${Scaffold}(",
      "\t\t\tappBar: AppBar(",
      "\t\t\t\ttitle: Text('${1:WidgetName}'),",
      "\t\t\t),${2}",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "StatefulWidget with Scaffold"
  },
  "InheritedWidget": {
    "prefix": "ihw",
    "body": [
      "class ${1:WidgetName} extends InheritedWidget {",
      "\tfinal Widget child;",
      "\t${2}",
      "\t${1:WidgetName}({",
      "\t\tthis.child,",
      "\t\t${2}",
      "\t}) : super(child: child);\n",
      "\tstatic ${1:WidgetName} of(BuildContext context) =>",
      "\t\t\tcontext.inheritFromWidgetOfExactType(${1:WidgetName});\n",
      "\t@override",
      "\tbool updateShouldNotify(${1:WidgetName} oldWidget) {",
      "\t\treturn true;",
      "\t}",
      "}"
    ],
    "description": "InheritedWidget"
  },
  "setState": {
    "prefix": "ss",
    "body": ["setState(() {${1}});"],
    "description": "setState"
  },
  "build": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "\treturn ${1:Container}(${2});",
      "}"
    ],
    "description": "Build Method"
  },
  "JsonSerializable Import": {
    "prefix": "jsli",
    "body": [
      "import 'package:json_annotation/json_annotation.dart';",
      "part '${1:name}.g.dart';",
      "",
      "@JsonSerializable(explicitToJson: true)",
      "class ${2:Name} {",
      "  ${3}",
      "",
      "  ${2:Name}({",
      "    ${4}",
      "  });",
      "",
      "  factory ${2:Name}.fromJson(Map<String, dynamic> json) {",
      "    return _$${2:Name}FromJson(json);",
      "  }",
      "",
      "  Map<String, dynamic> toJson() => _$${2:Name}ToJson(this);",
      "}"
    ],
    "description": "JsonSerializable Import"
  },
  "JsonSerializable": {
    "prefix": "jsl",
    "body": [
      "@JsonSerializable(explicitToJson: true)",
      "class ${1:Name} {",
      "  ${2}",
      "",
      "  ${1:Name}({",
      "    ${3}",
      "  });",
      "",
      "  factory ${1:Name}.fromJson(Map<String, dynamic> json) {",
      "    return _$${1:Name}FromJson(json);",
      "  }",
      "",
      "  Map<String, dynamic> toJson() => _$${1:Name}ToJson(this);",
      "}"
    ],
    "description": "JsonSerializable Class"
  },
  "MobX: Store（Lite）": {
    "prefix": "xsl",
    "body": [
      "import 'package:mobx/mobx.dart';",
      "",
      "part '${1}.g.dart';",
      "",
      "class ${2:Name} = _${2:Name} with _$${2:Name};",
      "",
      "abstract class _${2:Name} with Store {",
      "  ",
      "}"
    ],
    "description": "MobX: Store"
  },
  "MobX: Store": {
    "prefix": "xs",
    "body": [
      "import 'package:mobx/mobx.dart';",
      "part '${1}.g.dart';",
      "",
      "class ${2:StoreName} = _${2:StoreName} with _$${2:StoreName};",
      "",
      "abstract class _${2:StoreName} with Store {",
      "  _${2:StoreName}() {",
      "    // initReactions();",
      "  }",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 属性",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  List<ReactionDisposer> reactionDisposers = [];",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 数据：Observable",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 计算：Computed",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 动作：Action",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 反应：Reaction",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // 初始反应",
      "  initReactions() {",
      "    // 用 autorun，reaction 或 when 方法添加反应",
      "  }",
      "",
      "  // 取消反应",
      "  disposeReactions() {",
      "    reactionDisposers.forEach((disposer) => disposer());",
      "  }",
      "}",
      ""
    ],
    "description": "MobX: Store"
  },
  "MobX: Store with appService": {
    "prefix": "xsa",
    "body": [
      "import 'package:mobx/mobx.dart';",
      "import 'package:nid_flutter/app/app_service.dart';",
      "import 'package:nid_flutter/app/app_config.dart';",
      "import 'package:nid_flutter/app/exceptions/http_exception.dart';",
      "part '${1}.g.dart';",
      "",
      "class ${2:StoreName} = _${2:StoreName} with _$${2:StoreName};",
      "",
      "abstract class _${2:StoreName} with Store {",
      "  _${2:StoreName}(",
      "    {required this.appService,}",
      "  ) {",
      "    // initReactions();",
      "  }",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 属性",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  List<ReactionDisposer> reactionDisposers = [];",
      "  AppService appService;",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 数据：Observable",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  @observable",
      "  bool loading = false;",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 计算：Computed",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 动作：Action",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  @action",
      "  setLoading(bool data) {",
      "    loading = data;",
      "  }",
      "",
      "  // ————————————————————————————————————————————————————————",
      "  // 反应：Reaction",
      "  // ————————————————————————————————————————————————————————",
      "",
      "  // 初始反应",
      "  initReactions() {",
      "    // 用 autorun，reaction 或 when 方法添加反应",
      "  }",
      "",
      "  // 取消反应",
      "  disposeReactions() {",
      "    reactionDisposers.forEach((disposer) => disposer());",
      "  }",
      "}",
      ""
    ],
    "description": "MobX: Store with appService"
  },
  "MobX: Observable": {
    "prefix": "xo",
    "body": ["@observable", "${1};", ""],
    "description": "MobX: Observable"
  },
  "MobX: Action": {
    "prefix": "xa",
    "body": [
      "@action",
      "${1:actionName}(${2:DataType} data) {",
      "  ${3:observable} = data;",
      "}",
      ""
    ],
    "description": "MobX: Action"
  },
  "MobX: Computed": {
    "prefix": "xc",
    "body": ["@computed", "${1};", ""],
    "description": "MobX: Computed"
  },
  "MobX: Reaction": {
    "prefix": "xr",
    "body": [
      "${1:reactionName}() {",
      "  return reaction(",
      "    (_) => ${2:observable},",
      "    (_) {",
      "      ${3:effect}",
      "    },",
      "  );",
      "}",
      ""
    ],
    "description": "MobX: Reaction"
  },
  "API Client Method": {
    "prefix": "acm",
    "body": [
      "Future<${1:DataType}> ${2:methodName}(${3:params}) async {",
      "  try {",
      "    setLoading(true);",
      "",
      "    final uri = Uri.parse('${AppConfig.apiBaseUrl}/${4:API}');",
      "    final response = await appService.apiHttpClient.${5:get}(uri);",
      "    final responseBody = jsonDecode(response.body);",
      "",
      "    if (response.statusCode != ${6:200}) {",
      "      throw HttpException();",
      "    }",
      "",
      "    ${7:setData}(responseBody);",
      "",
      "    return responseBody;",
      "  } catch (e) {",
      "    throw HttpException();",
      "  } finally {",
      "    setLoading(false);",
      "  }",
      "}"
    ],
    "description": "API Client Method"
  },
  "Provider：ProxyProvider": {
    "prefix": "pr",
    "body": [
      "final ${1:name}Provider = ProxyProvider<${2:T}, ${3:R}>(",
      "  update: (context, ${4:t}, ${1:name}) {",
      "    if (${1:name} != null) {",
      "      return ${1:name};",
      "    } else {",
      "      return ${3:R}(${4:t}: ${4:t});",
      "    }",
      "  },",
      ");",
      "",
      ""
    ],
    "description": "Provider：ProxyProvider"
  },
  "Provider：Import provider package": {
    "prefix": "ip",
    "body": ["import 'package:provider/provider.dart';"],
    "description": "Provider：Import provider package"
  },
  "Provider：Read": {
    "prefix": "rp",
    "body": ["${1:name} = context.read<${2:T}>();"],
    "description": "Provider：Read"
  }
}
